{"version":3,"sources":["webpack://BCI2K/webpack/universalModuleDefinition","webpack://BCI2K/webpack/bootstrap","webpack://BCI2K/./node_modules/base64-js/index.js","webpack://BCI2K/./node_modules/buffer/index.js","webpack://BCI2K/./node_modules/ieee754/index.js","webpack://BCI2K/./node_modules/isarray/index.js","webpack://BCI2K/./node_modules/jdataview/dist/node/jdataview.js","webpack://BCI2K/(webpack)/buildin/global.js","webpack://BCI2K/./src/bci2k.js","webpack://BCI2K/external \"WebSocket\""],"names":["jDataView","require","websocket","window","w3cwebsocket","WebSocket","BCI2K_OperatorConnection","onconnect","event","ondisconnect","_socket","_execid","_exec","address","connection","Promise","resolve","reject","undefined","location","host","onerror","error","onopen","onclose","onmessage","_handleMessageEvent","arr","data","split","opcode","id","msg","slice","join","onstart","output","onoutput","exitcode","parseInt","ondone","onSuccess","onFailure","locationParameter","execute","then","indexOf","dataConnection","BCI2K_DataConnection","connect","readyState","OPEN","instruction","connected","toString","exec","send","x","console","log","state","ip","port","onGenericSignal","onStateVector","onSignalProperties","onStateFormat","signalProperties","stateFormat","stateVecOrder","SignalType","INT16","FLOAT24","FLOAT32","INT32","dv","val","_offset","byteLength","v","getUint8","String","fromCharCode","n","len","extended","getUint16","getUint32","getNullTermString","_decodeMessage","messageInterpreter","FileReader","onload","e","target","result","readAsArrayBuffer","descriptor","_decodeStateFormat","supplement","_decodeGenericSignal","_decodeSignalProperties","_decodeStateVector","unitstr","units","unit","idx","offset","Number","gain","symbol","vmin","vmax","propstr","replace","prop_tokens","props","i","length","trim","push","pidx","name","channels","numChannels","elements","numElements","numelements","signaltype","channelunit","_decodePhysicalUnits","elementunit","valueunits","formatStr","lines","lineIdx","stateline","bitWidth","defaultValue","byteLocation","bitLocation","vecOrder","loc","sort","a","b","signalType","nChannels","getLengthField","nElements","signal","ch","el","getInt16","getFloat32","getInt32","stateVectorLength","numVectors","states","Array","fill","vecIdx","vec","getBytes","tell","bits","byteIdx","stateIdx","fmt","mask","bIdx","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACtJA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,aAAa,mBAAO,CAAC,oDAAW;AAChC,cAAc,mBAAO,CAAC,gDAAS;AAC/B,cAAc,mBAAO,CAAC,gDAAS;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC5vDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;;;;;;ACnFA,iBAAiB;;AAEjB;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,KAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uIAAuI,YAAY;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAE;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,4EAA4E;AAClK;AACA,+BAA+B,mBAAmB;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+HAA+H,8EAA8E,qBAAqB,YAAY;AAC9O;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uEAAuE,OAAO;AAC9E;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA,iFAAiF,cAAc;AAC/F;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,E;;;;;;;;;;;;ACpVD;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,IAAIA,SAAS,GAAGC,mBAAO,CAAC,kEAAD,CAAvB,C,CAEA;;;AACA,IAAIC,SAAS,GAAG,IAAhB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,WAAS,GAAGD,mBAAO,CAAC,4BAAD,CAAP,CAAqBG,YAAjC;AAED,CAHD,MA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","file":"bci2k.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"WebSocket\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"WebSocket\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BCI2K\"] = factory(require(\"WebSocket\"));\n\telse\n\t\troot[\"BCI2K\"] = factory(root[\"WebSocket\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_websocket__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/bci2k.js\");\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","!function(factory) {\n    var global = this;\n    module.exports = factory(global);\n}(function(global) {\n    \"use strict\";\n    function is(obj, Ctor) {\n        return \"object\" != typeof obj || null === obj ? !1 : obj.constructor === Ctor || Object.prototype.toString.call(obj) === \"[object \" + Ctor.name + \"]\";\n    }\n    function arrayFrom(arrayLike, forceCopy) {\n        return !forceCopy && is(arrayLike, Array) ? arrayLike : Array.prototype.slice.call(arrayLike);\n    }\n    function defined(value, defaultValue) {\n        return void 0 !== value ? value : defaultValue;\n    }\n    function jDataView(buffer, byteOffset, byteLength, littleEndian) {\n        if (jDataView.is(buffer)) {\n            var result = buffer.slice(byteOffset, byteOffset + byteLength);\n            return result._littleEndian = defined(littleEndian, result._littleEndian), result;\n        }\n        if (!jDataView.is(this)) return new jDataView(buffer, byteOffset, byteLength, littleEndian);\n        if (this.buffer = buffer = jDataView.wrapBuffer(buffer), this._isArrayBuffer = compatibility.ArrayBuffer && is(buffer, ArrayBuffer), \n        this._isPixelData = !1, this._isDataView = compatibility.DataView && this._isArrayBuffer, \n        this._isNodeBuffer = !0 && compatibility.NodeBuffer && is(buffer, Buffer), !this._isNodeBuffer && !this._isArrayBuffer && !is(buffer, Array)) throw new TypeError(\"jDataView buffer has an incompatible type\");\n        this._littleEndian = !!littleEndian;\n        var bufferLength = \"byteLength\" in buffer ? buffer.byteLength : buffer.length;\n        this.byteOffset = byteOffset = defined(byteOffset, 0), this.byteLength = byteLength = defined(byteLength, bufferLength - byteOffset), \n        this._offset = this._bitOffset = 0, this._isDataView ? this._view = new DataView(buffer, byteOffset, byteLength) : this._checkBounds(byteOffset, byteLength, bufferLength), \n        this._engineAction = this._isDataView ? this._dataViewAction : this._isNodeBuffer ? this._nodeBufferAction : this._isArrayBuffer ? this._arrayBufferAction : this._arrayAction;\n    }\n    function getCharCodes(string) {\n        if (compatibility.NodeBuffer) return new Buffer(string, \"binary\");\n        for (var Type = compatibility.ArrayBuffer ? Uint8Array : Array, codes = new Type(string.length), i = 0, length = string.length; length > i; i++) codes[i] = 255 & string.charCodeAt(i);\n        return codes;\n    }\n    function pow2(n) {\n        return n >= 0 && 31 > n ? 1 << n : pow2[n] || (pow2[n] = Math.pow(2, n));\n    }\n    function Uint64(lo, hi) {\n        this.lo = lo, this.hi = hi;\n    }\n    function Int64() {\n        Uint64.apply(this, arguments);\n    }\n    var compatibility = {\n        NodeBuffer: !0 && \"Buffer\" in global,\n        DataView: \"DataView\" in global,\n        ArrayBuffer: \"ArrayBuffer\" in global,\n        PixelData: !1\n    }, TextEncoder = global.TextEncoder, TextDecoder = global.TextDecoder;\n    compatibility.NodeBuffer && !function(buffer) {\n        try {\n            buffer.writeFloatLE(1/0, 0);\n        } catch (e) {\n            compatibility.NodeBuffer = !1;\n        }\n    }(new Buffer(4));\n    var dataTypes = {\n        Int8: 1,\n        Int16: 2,\n        Int32: 4,\n        Uint8: 1,\n        Uint16: 2,\n        Uint32: 4,\n        Float32: 4,\n        Float64: 8\n    };\n    jDataView.wrapBuffer = function(buffer) {\n        switch (typeof buffer) {\n          case \"number\":\n            if (compatibility.NodeBuffer) buffer = new Buffer(buffer), buffer.fill(0); else if (compatibility.ArrayBuffer) buffer = new Uint8Array(buffer).buffer; else {\n                buffer = new Array(buffer);\n                for (var i = 0; i < buffer.length; i++) buffer[i] = 0;\n            }\n            return buffer;\n\n          case \"string\":\n            buffer = getCharCodes(buffer);\n\n          default:\n            return \"length\" in buffer && !(compatibility.NodeBuffer && is(buffer, Buffer) || compatibility.ArrayBuffer && is(buffer, ArrayBuffer)) && (compatibility.NodeBuffer ? buffer = new Buffer(buffer) : compatibility.ArrayBuffer ? is(buffer, ArrayBuffer) || (buffer = new Uint8Array(buffer).buffer, \n            is(buffer, ArrayBuffer) || (buffer = new Uint8Array(arrayFrom(buffer, !0)).buffer)) : buffer = arrayFrom(buffer)), \n            buffer;\n        }\n    }, jDataView.is = function(view) {\n        return view && view.jDataView;\n    }, jDataView.from = function() {\n        return new jDataView(arguments);\n    }, jDataView.Uint64 = Uint64, Uint64.prototype = {\n        valueOf: function() {\n            return this.lo + pow2(32) * this.hi;\n        },\n        toString: function() {\n            return Number.prototype.toString.apply(this.valueOf(), arguments);\n        }\n    }, Uint64.fromNumber = function(number) {\n        var hi = Math.floor(number / pow2(32)), lo = number - hi * pow2(32);\n        return new Uint64(lo, hi);\n    }, jDataView.Int64 = Int64, Int64.prototype = \"create\" in Object ? Object.create(Uint64.prototype) : new Uint64(), \n    Int64.prototype.valueOf = function() {\n        return this.hi < pow2(31) ? Uint64.prototype.valueOf.apply(this, arguments) : -(pow2(32) - this.lo + pow2(32) * (pow2(32) - 1 - this.hi));\n    }, Int64.fromNumber = function(number) {\n        var lo, hi;\n        if (number >= 0) {\n            var unsigned = Uint64.fromNumber(number);\n            lo = unsigned.lo, hi = unsigned.hi;\n        } else hi = Math.floor(number / pow2(32)), lo = number - hi * pow2(32), hi += pow2(32);\n        return new Int64(lo, hi);\n    };\n    var proto = jDataView.prototype = {\n        compatibility: compatibility,\n        jDataView: !0,\n        _checkBounds: function(byteOffset, byteLength, maxLength) {\n            if (\"number\" != typeof byteOffset) throw new TypeError(\"Offset is not a number.\");\n            if (\"number\" != typeof byteLength) throw new TypeError(\"Size is not a number.\");\n            if (0 > byteLength) throw new RangeError(\"Length is negative.\");\n            if (0 > byteOffset || byteOffset + byteLength > defined(maxLength, this.byteLength)) throw new RangeError(\"Offsets are out of bounds.\");\n        },\n        _action: function(type, isReadAction, byteOffset, littleEndian, value) {\n            return this._engineAction(type, isReadAction, defined(byteOffset, this._offset), defined(littleEndian, this._littleEndian), value);\n        },\n        _dataViewAction: function(type, isReadAction, byteOffset, littleEndian, value) {\n            return this._offset = byteOffset + dataTypes[type], isReadAction ? this._view[\"get\" + type](byteOffset, littleEndian) : this._view[\"set\" + type](byteOffset, value, littleEndian);\n        },\n        _arrayBufferAction: function(type, isReadAction, byteOffset, littleEndian, value) {\n            var typedArray, size = dataTypes[type], TypedArray = global[type + \"Array\"];\n            if (littleEndian = defined(littleEndian, this._littleEndian), 1 === size || (this.byteOffset + byteOffset) % size === 0 && littleEndian) return typedArray = new TypedArray(this.buffer, this.byteOffset + byteOffset, 1), \n            this._offset = byteOffset + size, isReadAction ? typedArray[0] : typedArray[0] = value;\n            var bytes = new Uint8Array(isReadAction ? this.getBytes(size, byteOffset, littleEndian, !0) : size);\n            return typedArray = new TypedArray(bytes.buffer, 0, 1), isReadAction ? typedArray[0] : (typedArray[0] = value, \n            void this._setBytes(byteOffset, bytes, littleEndian));\n        },\n        _arrayAction: function(type, isReadAction, byteOffset, littleEndian, value) {\n            return isReadAction ? this[\"_get\" + type](byteOffset, littleEndian) : this[\"_set\" + type](byteOffset, value, littleEndian);\n        },\n        _getBytes: function(length, byteOffset, littleEndian) {\n            littleEndian = defined(littleEndian, this._littleEndian), byteOffset = defined(byteOffset, this._offset), \n            length = defined(length, this.byteLength - byteOffset), this._checkBounds(byteOffset, length), \n            byteOffset += this.byteOffset, this._offset = byteOffset - this.byteOffset + length;\n            var result = this._isArrayBuffer ? new Uint8Array(this.buffer, byteOffset, length) : (this.buffer.slice || Array.prototype.slice).call(this.buffer, byteOffset, byteOffset + length);\n            return littleEndian || 1 >= length ? result : arrayFrom(result).reverse();\n        },\n        getBytes: function(length, byteOffset, littleEndian, toArray) {\n            var result = this._getBytes(length, byteOffset, defined(littleEndian, !0));\n            return toArray ? arrayFrom(result) : result;\n        },\n        _setBytes: function(byteOffset, bytes, littleEndian) {\n            var length = bytes.length;\n            if (0 !== length) {\n                if (littleEndian = defined(littleEndian, this._littleEndian), byteOffset = defined(byteOffset, this._offset), \n                this._checkBounds(byteOffset, length), !littleEndian && length > 1 && (bytes = arrayFrom(bytes, !0).reverse()), \n                byteOffset += this.byteOffset, this._isArrayBuffer) new Uint8Array(this.buffer, byteOffset, length).set(bytes); else if (this._isNodeBuffer) new Buffer(bytes).copy(this.buffer, byteOffset); else for (var i = 0; length > i; i++) this.buffer[byteOffset + i] = bytes[i];\n                this._offset = byteOffset - this.byteOffset + length;\n            }\n        },\n        setBytes: function(byteOffset, bytes, littleEndian) {\n            this._setBytes(byteOffset, bytes, defined(littleEndian, !0));\n        },\n        getString: function(byteLength, byteOffset, encoding) {\n            if (this._isNodeBuffer) return byteOffset = defined(byteOffset, this._offset), byteLength = defined(byteLength, this.byteLength - byteOffset), \n            this._checkBounds(byteOffset, byteLength), this._offset = byteOffset + byteLength, \n            this.buffer.toString(encoding || \"binary\", this.byteOffset + byteOffset, this.byteOffset + this._offset);\n            var bytes = this._getBytes(byteLength, byteOffset, !0);\n            if (encoding = \"utf8\" === encoding ? \"utf-8\" : encoding || \"binary\", TextDecoder && \"binary\" !== encoding) return new TextDecoder(encoding).decode(this._isArrayBuffer ? bytes : new Uint8Array(bytes));\n            var string = \"\";\n            byteLength = bytes.length;\n            for (var i = 0; byteLength > i; i++) string += String.fromCharCode(bytes[i]);\n            return \"utf-8\" === encoding && (string = decodeURIComponent(escape(string))), string;\n        },\n        setString: function(byteOffset, subString, encoding) {\n            if (this._isNodeBuffer) return byteOffset = defined(byteOffset, this._offset), this._checkBounds(byteOffset, subString.length), \n            void (this._offset = byteOffset + this.buffer.write(subString, this.byteOffset + byteOffset, encoding || \"binary\"));\n            encoding = \"utf8\" === encoding ? \"utf-8\" : encoding || \"binary\";\n            var bytes;\n            TextEncoder && \"binary\" !== encoding ? bytes = new TextEncoder(encoding).encode(subString) : (\"utf-8\" === encoding && (subString = unescape(encodeURIComponent(subString))), \n            bytes = getCharCodes(subString)), this._setBytes(byteOffset, bytes, !0);\n        },\n        getChar: function(byteOffset) {\n            return this.getString(1, byteOffset);\n        },\n        setChar: function(byteOffset, character) {\n            this.setString(byteOffset, character);\n        },\n        tell: function() {\n            return this._offset;\n        },\n        seek: function(byteOffset) {\n            return this._checkBounds(byteOffset, 0), this._offset = byteOffset;\n        },\n        skip: function(byteLength) {\n            return this.seek(this._offset + byteLength);\n        },\n        slice: function(start, end, forceCopy) {\n            function normalizeOffset(offset, byteLength) {\n                return 0 > offset ? offset + byteLength : offset;\n            }\n            return start = normalizeOffset(start, this.byteLength), end = normalizeOffset(defined(end, this.byteLength), this.byteLength), \n            forceCopy ? new jDataView(this.getBytes(end - start, start, !0, !0), void 0, void 0, this._littleEndian) : new jDataView(this.buffer, this.byteOffset + start, end - start, this._littleEndian);\n        },\n        alignBy: function(byteCount) {\n            return this._bitOffset = 0, 1 !== defined(byteCount, 1) ? this.skip(byteCount - (this._offset % byteCount || byteCount)) : this._offset;\n        },\n        _getFloat64: function(byteOffset, littleEndian) {\n            var b = this._getBytes(8, byteOffset, littleEndian), sign = 1 - 2 * (b[7] >> 7), exponent = ((b[7] << 1 & 255) << 3 | b[6] >> 4) - 1023, mantissa = (15 & b[6]) * pow2(48) + b[5] * pow2(40) + b[4] * pow2(32) + b[3] * pow2(24) + b[2] * pow2(16) + b[1] * pow2(8) + b[0];\n            return 1024 === exponent ? 0 !== mantissa ? 0/0 : 1/0 * sign : -1023 === exponent ? sign * mantissa * pow2(-1074) : sign * (1 + mantissa * pow2(-52)) * pow2(exponent);\n        },\n        _getFloat32: function(byteOffset, littleEndian) {\n            var b = this._getBytes(4, byteOffset, littleEndian), sign = 1 - 2 * (b[3] >> 7), exponent = (b[3] << 1 & 255 | b[2] >> 7) - 127, mantissa = (127 & b[2]) << 16 | b[1] << 8 | b[0];\n            return 128 === exponent ? 0 !== mantissa ? 0/0 : 1/0 * sign : -127 === exponent ? sign * mantissa * pow2(-149) : sign * (1 + mantissa * pow2(-23)) * pow2(exponent);\n        },\n        _get64: function(Type, byteOffset, littleEndian) {\n            littleEndian = defined(littleEndian, this._littleEndian), byteOffset = defined(byteOffset, this._offset);\n            for (var parts = littleEndian ? [ 0, 4 ] : [ 4, 0 ], i = 0; 2 > i; i++) parts[i] = this.getUint32(byteOffset + parts[i], littleEndian);\n            return this._offset = byteOffset + 8, new Type(parts[0], parts[1]);\n        },\n        getInt64: function(byteOffset, littleEndian) {\n            return this._get64(Int64, byteOffset, littleEndian);\n        },\n        getUint64: function(byteOffset, littleEndian) {\n            return this._get64(Uint64, byteOffset, littleEndian);\n        },\n        _getInt32: function(byteOffset, littleEndian) {\n            var b = this._getBytes(4, byteOffset, littleEndian);\n            return b[3] << 24 | b[2] << 16 | b[1] << 8 | b[0];\n        },\n        _getUint32: function(byteOffset, littleEndian) {\n            return this._getInt32(byteOffset, littleEndian) >>> 0;\n        },\n        _getInt16: function(byteOffset, littleEndian) {\n            return this._getUint16(byteOffset, littleEndian) << 16 >> 16;\n        },\n        _getUint16: function(byteOffset, littleEndian) {\n            var b = this._getBytes(2, byteOffset, littleEndian);\n            return b[1] << 8 | b[0];\n        },\n        _getInt8: function(byteOffset) {\n            return this._getUint8(byteOffset) << 24 >> 24;\n        },\n        _getUint8: function(byteOffset) {\n            return this._getBytes(1, byteOffset)[0];\n        },\n        _getBitRangeData: function(bitLength, byteOffset) {\n            var startBit = (defined(byteOffset, this._offset) << 3) + this._bitOffset, endBit = startBit + bitLength, start = startBit >>> 3, end = endBit + 7 >>> 3, b = this._getBytes(end - start, start, !0), wideValue = 0;\n            (this._bitOffset = 7 & endBit) && (this._bitOffset -= 8);\n            for (var i = 0, length = b.length; length > i; i++) wideValue = wideValue << 8 | b[i];\n            return {\n                start: start,\n                bytes: b,\n                wideValue: wideValue\n            };\n        },\n        getSigned: function(bitLength, byteOffset) {\n            var shift = 32 - bitLength;\n            return this.getUnsigned(bitLength, byteOffset) << shift >> shift;\n        },\n        getUnsigned: function(bitLength, byteOffset) {\n            var value = this._getBitRangeData(bitLength, byteOffset).wideValue >>> -this._bitOffset;\n            return 32 > bitLength ? value & ~(-1 << bitLength) : value;\n        },\n        _setBinaryFloat: function(byteOffset, value, mantSize, expSize, littleEndian) {\n            var exponent, mantissa, signBit = 0 > value ? 1 : 0, eMax = ~(-1 << expSize - 1), eMin = 1 - eMax;\n            0 > value && (value = -value), 0 === value ? (exponent = 0, mantissa = 0) : isNaN(value) ? (exponent = 2 * eMax + 1, \n            mantissa = 1) : 1/0 === value ? (exponent = 2 * eMax + 1, mantissa = 0) : (exponent = Math.floor(Math.log(value) / Math.LN2), \n            exponent >= eMin && eMax >= exponent ? (mantissa = Math.floor((value * pow2(-exponent) - 1) * pow2(mantSize)), \n            exponent += eMax) : (mantissa = Math.floor(value / pow2(eMin - mantSize)), exponent = 0));\n            for (var b = []; mantSize >= 8; ) b.push(mantissa % 256), mantissa = Math.floor(mantissa / 256), \n            mantSize -= 8;\n            for (exponent = exponent << mantSize | mantissa, expSize += mantSize; expSize >= 8; ) b.push(255 & exponent), \n            exponent >>>= 8, expSize -= 8;\n            b.push(signBit << expSize | exponent), this._setBytes(byteOffset, b, littleEndian);\n        },\n        _setFloat32: function(byteOffset, value, littleEndian) {\n            this._setBinaryFloat(byteOffset, value, 23, 8, littleEndian);\n        },\n        _setFloat64: function(byteOffset, value, littleEndian) {\n            this._setBinaryFloat(byteOffset, value, 52, 11, littleEndian);\n        },\n        _set64: function(Type, byteOffset, value, littleEndian) {\n            \"object\" != typeof value && (value = Type.fromNumber(value)), littleEndian = defined(littleEndian, this._littleEndian), \n            byteOffset = defined(byteOffset, this._offset);\n            var parts = littleEndian ? {\n                lo: 0,\n                hi: 4\n            } : {\n                lo: 4,\n                hi: 0\n            };\n            for (var partName in parts) this.setUint32(byteOffset + parts[partName], value[partName], littleEndian);\n            this._offset = byteOffset + 8;\n        },\n        setInt64: function(byteOffset, value, littleEndian) {\n            this._set64(Int64, byteOffset, value, littleEndian);\n        },\n        setUint64: function(byteOffset, value, littleEndian) {\n            this._set64(Uint64, byteOffset, value, littleEndian);\n        },\n        _setUint32: function(byteOffset, value, littleEndian) {\n            this._setBytes(byteOffset, [ 255 & value, value >>> 8 & 255, value >>> 16 & 255, value >>> 24 ], littleEndian);\n        },\n        _setUint16: function(byteOffset, value, littleEndian) {\n            this._setBytes(byteOffset, [ 255 & value, value >>> 8 & 255 ], littleEndian);\n        },\n        _setUint8: function(byteOffset, value) {\n            this._setBytes(byteOffset, [ 255 & value ]);\n        },\n        setUnsigned: function(byteOffset, value, bitLength) {\n            var data = this._getBitRangeData(bitLength, byteOffset), wideValue = data.wideValue, b = data.bytes;\n            wideValue &= ~(~(-1 << bitLength) << -this._bitOffset), wideValue |= (32 > bitLength ? value & ~(-1 << bitLength) : value) << -this._bitOffset;\n            for (var i = b.length - 1; i >= 0; i--) b[i] = 255 & wideValue, wideValue >>>= 8;\n            this._setBytes(data.start, b, !0);\n        }\n    }, nodeNaming = {\n        Int8: \"Int8\",\n        Int16: \"Int16\",\n        Int32: \"Int32\",\n        Uint8: \"UInt8\",\n        Uint16: \"UInt16\",\n        Uint32: \"UInt32\",\n        Float32: \"Float\",\n        Float64: \"Double\"\n    };\n    proto._nodeBufferAction = function(type, isReadAction, byteOffset, littleEndian, value) {\n        this._offset = byteOffset + dataTypes[type];\n        var nodeName = nodeNaming[type] + (\"Int8\" === type || \"Uint8\" === type ? \"\" : littleEndian ? \"LE\" : \"BE\");\n        return byteOffset += this.byteOffset, isReadAction ? this.buffer[\"read\" + nodeName](byteOffset) : this.buffer[\"write\" + nodeName](value, byteOffset);\n    };\n    for (var type in dataTypes) !function(type) {\n        proto[\"get\" + type] = function(byteOffset, littleEndian) {\n            return this._action(type, !0, byteOffset, littleEndian);\n        }, proto[\"set\" + type] = function(byteOffset, value, littleEndian) {\n            this._action(type, !1, byteOffset, littleEndian, value);\n        };\n    }(type);\n    proto._setInt32 = proto._setUint32, proto._setInt16 = proto._setUint16, proto._setInt8 = proto._setUint8, \n    proto.setSigned = proto.setUnsigned;\n    for (var method in proto) \"set\" === method.slice(0, 3) && !function(type) {\n        proto[\"write\" + type] = function() {\n            Array.prototype.unshift.call(arguments, void 0), this[\"set\" + type].apply(this, arguments);\n        };\n    }(method.slice(3));\n    return jDataView;\n});","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// ======================================================================== //\r\n//\r\n// bci2k.js\r\n// A javascript connector for BCI2000\r\n//\r\n// ======================================================================== //\r\n\r\n// REQUIRES\r\nvar jDataView = require(\"jdataview\");\r\n\r\n//Node vs Browser environments\r\nlet websocket = null;\r\nif (typeof window === \"undefined\") {\r\n  websocket = require(\"websocket\").w3cwebsocket;\r\n\r\n} else {\r\n  websocket = WebSocket;\r\n}\r\n\r\nclass BCI2K_OperatorConnection {\r\n  constructor() {\r\n    this.onconnect = function(event) {};\r\n    this.ondisconnect = function(event) {};\r\n\r\n    this._socket = null;\r\n    this._execid = 0;\r\n    this._exec = {};\r\n  }\r\n\r\n  connect(address) {\r\n    let connection = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (address === undefined)\r\n        // TODO Browser-dependent\r\n        address = window.location.host;\r\n\r\n      connection.address = address;\r\n\r\n      connection._socket = new websocket(\"ws://\" + connection.address);\r\n\r\n      connection._socket.onerror = error => {\r\n        // This will only execute if we err before connecting, since\r\n        // Promises can only get triggered once\r\n        reject(\"Error connecting to BCI2000 at \" + connection.address);\r\n      };\r\n\r\n      connection._socket.onopen = event => {\r\n        connection.onconnect(event);\r\n        resolve(event);\r\n      };\r\n\r\n      connection._socket.onclose = event => {\r\n        connection.ondisconnect(event);\r\n      };\r\n\r\n      connection._socket.onmessage = event => {\r\n        connection._handleMessageEvent(event);\r\n      };\r\n    });\r\n  }\r\n\r\n  _handleMessageEvent(event) {\r\n    let arr = event.data.split(\" \");\r\n\r\n    let opcode = arr[0];\r\n    let id = arr[1];\r\n    let msg = arr.slice(2).join(\" \");\r\n\r\n    switch (opcode) {\r\n      case \"S\": // START: Starting to execute command\r\n        if (this._exec[id].onstart) this._exec[id].onstart(this._exec[id]);\r\n        break;\r\n      case \"O\": // OUTPUT: Received output from command\r\n        this._exec[id].output += msg + \" \\n\";\r\n        if (this._exec[id].onoutput) this._exec[id].onoutput(this._exec[id]);\r\n        break;\r\n      case \"D\": // DONE: Done executing command\r\n        this._exec[id].exitcode = parseInt(msg);\r\n        if (this._exec[id].ondone) this._exec[id].ondone(this._exec[id]);\r\n        delete this._exec[id];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  tap(location, onSuccess, onFailure) {\r\n    let connection = this;\r\n\r\n    let locationParameter = \"WS\" + location + \"Server\";\r\n\r\n    return this.execute(\"Get Parameter \" + locationParameter).then(location => {\r\n      if (location.indexOf(\"does not exist\") >= 0) {\r\n        return Promise.reject(\"Location parameter does not exist\");\r\n      }\r\n      if (location === \"\") {\r\n        return Promise.reject(\"Location parameter not set\");\r\n      }\r\n\r\n      let dataConnection = new BCI2K_DataConnection();\r\n\r\n      // TODO We used to \"resolve\" here, before doiing the\r\n      // actual connecting bit, but I think it makes much\r\n      // more sense to have tap \"success\" be actually\r\n      // connecting to the source, rather than just getting\r\n      // a sensical address\r\n\r\n      // Use our address plus the port from the result\r\n      return dataConnection\r\n        .connect(connection.address + \":\" + location.split(\":\")[1])\r\n        .then(event => {\r\n          // To keep with our old API, we actually want to wrap the\r\n          // dataConnection, and not the connection event\r\n          // TODO This means we can't get the connection event!\r\n          return dataConnection;\r\n        });\r\n    });\r\n  }\r\n\r\n  connected() {\r\n    return this._socket !== null && this._socket.readyState === websocket.OPEN;\r\n  }\r\n\r\n  execute(instruction, ondone, onstart, onoutput) {\r\n    let connection = this;\r\n\r\n    if (this.connected()) {\r\n      return new Promise((resolve, reject) => {\r\n        let id = (++connection._execid).toString();\r\n\r\n        // TODO Properly handle errors from BCI2000\r\n        connection._exec[id] = {\r\n          onstart: onstart,\r\n          onoutput: onoutput,\r\n          ondone: exec => {\r\n            if (ondone) {\r\n              ondone(exec);\r\n            }\r\n            resolve(exec.output); // TODO Should pass whole thing?\r\n          },\r\n          output: \"\",\r\n          exitcode: null\r\n        };\r\n        let msg = \"E \" + id + \" \" + instruction;\r\n        connection._socket.send(msg);\r\n      });\r\n    }\r\n\r\n    // Cannot execute if not connected\r\n    return Promise.reject(\"Cannot execute instruction: not connected to BCI2000\");\r\n  }\r\n\r\n  getVersion() {\r\n    this.execute(\"Version\").then(x => console.log(x.split(\" \")[1]));\r\n  }\r\n\r\n  showWindow() {\r\n    return this.execute(\"Show Window\");\r\n  }\r\n\r\n  hideWindow() {\r\n    return this.execute(\"Hide Window\");\r\n  }\r\n\r\n  setWatch(state, ip, port) {\r\n    return this.execute(\"Add watch \" + state + \" at \" + ip + \":\" + port);\r\n  }\r\n\r\n  resetSystem() {\r\n    return this.execute(\"Reset System\");\r\n  }\r\n\r\n  setConfig() {\r\n    return this.execute(\"Set Config\");\r\n  }\r\n\r\n  start() {\r\n    return this.execute(\"Start\");\r\n  }\r\n\r\n  stop() {\r\n    return this.execute(\"Stop\");\r\n  }\r\n\r\n  kill() {\r\n    return this.execute(\"Exit\");\r\n  }\r\n}\r\n\r\nclass BCI2K_DataConnection {\r\n  constructor() {\r\n    this._socket = null;\r\n\r\n    this.onconnect = function(event) {};\r\n    this.onGenericSignal = function(data) {};\r\n    this.onStateVector = function(data) {};\r\n    this.onSignalProperties = function(data) {};\r\n    this.onStateFormat = function(data) {};\r\n    this.ondisconnect = function(event) {};\r\n\r\n    this.signalProperties = null;\r\n    this.stateFormat = null;\r\n    this.stateVecOrder = null;\r\n\r\n    this.SignalType = {\r\n      INT16: 0,\r\n      FLOAT24: 1,\r\n      FLOAT32: 2,\r\n      INT32: 3\r\n    };\r\n  }\r\n\r\n  getNullTermString(dv) {\r\n    var val = \"\";\r\n    while (dv._offset < dv.byteLength) {\r\n      var v = dv.getUint8();\r\n      if (v == 0) break;\r\n      val += String.fromCharCode(v);\r\n    }\r\n    return val;\r\n  }\r\n  getLengthField(dv, n) {\r\n    var len = 0;\r\n    var extended = false;\r\n    switch (n) {\r\n      case 1:\r\n        len = dv.getUint8();\r\n        extended = len == 0xff;\r\n        break;\r\n      case 2:\r\n        len = dv.getUint16();\r\n        extended = len == 0xffff;\r\n        break;\r\n      case 4:\r\n        len = dv.getUint32();\r\n        extended = len == 0xffffffff;\r\n        break;\r\n      default:\r\n        console.error(\"unsupported\");\r\n        break;\r\n    }\r\n\r\n    return extended ? parseInt(getNullTermString(dv)) : len;\r\n  }\r\n\r\n  connect(address) {\r\n    let connection = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      connection._socket = new websocket(\"ws://\" + address);\r\n\r\n      connection._socket.onerror = function(event) {\r\n        // This will only execute if we err before connecting, since\r\n        // Promises can only get triggered once\r\n        reject(\"Error connecting to data source at \" + connection.address);\r\n      };\r\n\r\n      connection._socket.onopen = event => {\r\n        connection.onconnect(event);\r\n        resolve(event);\r\n      };\r\n\r\n      connection._socket.onclose = event => {\r\n        connection.ondisconnect(event);\r\n      };\r\n\r\n      connection._socket.onmessage = event => {\r\n        connection._handleMessageEvent(event);\r\n      };\r\n    });\r\n  }\r\n\r\n  _handleMessageEvent(event) {\r\n    let connection = this;\r\n\r\n      //This is stupid. Node uses buffers and browsers use blobs.\r\n    if (typeof window === \"undefined\") {\r\n        connection._decodeMessage(event.data);\r\n    } else {\r\n      let messageInterpreter = new FileReader() \r\n      messageInterpreter.onload = e => {\r\n        connection._decodeMessage(e.target.result);\r\n      };\r\n      messageInterpreter.readAsArrayBuffer(event.data); \r\n    }\r\n  }\r\n\r\n  connected() {\r\n    return this._socket != null && this._socket.readyState === websocket.OPEN;\r\n  }\r\n\r\n  _decodeMessage(data) {\r\n    let dv = jDataView(data, 0, data.byteLength, true);\r\n    // var dv = new DataView(data, 0, data.byteLength, true);\r\n    getNullTermString = (dv) => {\r\n      let val = \"\";\r\n      while (dv._offset < dv.byteLength) {\r\n        let v = dv.getUint8();\r\n        if (v === 0) break;\r\n        val += String.fromCharCode(v);\r\n      }\r\n      return val;\r\n    };\r\n    let descriptor = dv.getUint8();\r\n\r\n    switch (descriptor) {\r\n      case 3:\r\n        this._decodeStateFormat(dv);\r\n        break;\r\n\r\n      case 4:\r\n        var supplement = dv.getUint8();\r\n\r\n        switch (supplement) {\r\n          case 1:\r\n            this._decodeGenericSignal(dv);\r\n            break;\r\n          case 3:\r\n            this._decodeSignalProperties(dv);\r\n            break;\r\n          default:\r\n            console.error(\"Unsupported Supplement: \" + supplement.toString());\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case 5:\r\n        this._decodeStateVector(dv);\r\n        break;\r\n\r\n      default:\r\n        console.error(\"Unsupported Descriptor: \" + descriptor.toString());\r\n        break;\r\n    }\r\n  }\r\n\r\n  _decodePhysicalUnits(unitstr) {\r\n    let units = {};\r\n    let unit = unitstr.split(\" \");\r\n    let idx = 0;\r\n    units.offset = Number(unit[idx++]);\r\n    units.gain = Number(unit[idx++]);\r\n    units.symbol = unit[idx++];\r\n    units.vmin = Number(unit[idx++]);\r\n    units.vmax = Number(unit[idx++]);\r\n    return units;\r\n  }\r\n\r\n  _decodeSignalProperties(dv) {\r\n    let propstr = getNullTermString(dv);\r\n\r\n    // Bugfix: There seems to not always be spaces after '{' characters\r\n    propstr = propstr.replace(/{/g, \" { \");\r\n    propstr = propstr.replace(/}/g, \" } \");\r\n\r\n    this.signalProperties = {};\r\n    let prop_tokens = propstr.split(\" \");\r\n    let props = [];\r\n    for (let i = 0; i < prop_tokens.length; i++) {\r\n      if ((prop_tokens[i].trim()) === \"\") continue;\r\n      props.push(prop_tokens[i]);\r\n    }\r\n\r\n    let pidx = 0;\r\n    this.signalProperties.name = props[pidx++];\r\n\r\n    this.signalProperties.channels = [];\r\n    if (props[pidx] === \"{\") {\r\n      while (props[++pidx] !== \"}\")\r\n        this.signalProperties.channels.push(props[pidx]);\r\n      pidx++; // }\r\n    } else {\r\n      let numChannels = parseInt(props[pidx++]);\r\n      for (let i = 0; i < numChannels; i++)\r\n        this.signalProperties.channels.push((i + 1).toString());\r\n    }\r\n\r\n    this.signalProperties.elements = [];\r\n    if (props[pidx] === \"{\") {\r\n      while (props[++pidx] !== \"}\")\r\n        this.signalProperties.elements.push(props[pidx]);\r\n      pidx++; // }\r\n    } else {\r\n      let numElements = parseInt(props[pidx++]);\r\n      for (let i = 0; i < numElements; i++)\r\n        this.signalProperties.elements.push((i + 1).toString());\r\n    }\r\n\r\n    // Backward Compatibility\r\n    this.signalProperties.numelements = this.signalProperties.elements.length;\r\n    this.signalProperties.signaltype = props[pidx++];\r\n    this.signalProperties.channelunit = this._decodePhysicalUnits(\r\n      props.slice(pidx, (pidx += 5)).join(\" \")\r\n    );\r\n\r\n    this.signalProperties.elementunit = this._decodePhysicalUnits(\r\n      props.slice(pidx, (pidx += 5)).join(\" \")\r\n    );\r\n\r\n    pidx++; // '{'\r\n\r\n    this.signalProperties.valueunits = [];\r\n    for (let i = 0; i < this.signalProperties.channels.length; i++)\r\n      this.signalProperties.valueunits.push(\r\n        this._decodePhysicalUnits(props.slice(pidx, (pidx += 5)).join(\" \"))\r\n      );\r\n\r\n    pidx++; // '}'\r\n\r\n    this.onSignalProperties(this.signalProperties);\r\n  }\r\n\r\n  _decodeStateFormat(dv) {\r\n    this.stateFormat = {};\r\n    let formatStr = getNullTermString(dv);\r\n\r\n    let lines = formatStr.split(\"\\n\");\r\n    for (let lineIdx = 0; lineIdx < lines.length; lineIdx++) {\r\n      if ((lines[lineIdx].trim()).length === 0) continue;\r\n      let stateline = lines[lineIdx].split(\" \");\r\n      let name = stateline[0];\r\n      this.stateFormat[name] = {};\r\n      this.stateFormat[name].bitWidth = parseInt(stateline[1]);\r\n      this.stateFormat[name].defaultValue = parseInt(stateline[2]);\r\n      this.stateFormat[name].byteLocation = parseInt(stateline[3]);\r\n      this.stateFormat[name].bitLocation = parseInt(stateline[4]);\r\n    }\r\n\r\n    let vecOrder = [];\r\n    for (let state in this.stateFormat) {\r\n      let loc = this.stateFormat[state].byteLocation * 8;\r\n      loc += this.stateFormat[state].bitLocation;\r\n      vecOrder.push([state, loc]);\r\n    }\r\n\r\n    // Sort by bit location\r\n    vecOrder.sort(function(a, b) {\r\n      return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0;\r\n    });\r\n\r\n    // Create a list of ( state, bitwidth ) for decoding state vectors\r\n    this.stateVecOrder = [];\r\n    for (let i = 0; i < vecOrder.length; i++) {\r\n      let state = vecOrder[i][0];\r\n      this.stateVecOrder.push([state, this.stateFormat[state].bitWidth]);\r\n    }\r\n\r\n    this.onStateFormat(this.stateFormat);\r\n  }\r\n\r\n  _decodeGenericSignal(dv) {\r\n    let signalType = dv.getUint8();\r\n    let nChannels = this.getLengthField(dv, 2);\r\n    let nElements = this.getLengthField(dv, 2);\r\n\r\n    let signal = [];\r\n    for (let ch = 0; ch < nChannels; ++ch) {\r\n      signal.push([]);\r\n      for (let el = 0; el < nElements; ++el) {\r\n        switch (signalType) {\r\n          case this.SignalType.INT16:\r\n            signal[ch].push(dv.getInt16());\r\n            break;\r\n\r\n          case this.SignalType.FLOAT32:\r\n            signal[ch].push(dv.getFloat32());\r\n            break;\r\n\r\n          case this.SignalType.INT32:\r\n            signal[ch].push(dv.getInt32());\r\n            break;\r\n\r\n          case this.SignalType.FLOAT24:\r\n            // TODO: Currently Unsupported\r\n            signal[ch].push(0.0);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.onGenericSignal(signal);\r\n  }\r\n\r\n  _decodeStateVector(dv) {\r\n    if (this.stateVecOrder == null) return;\r\n\r\n    // Currently, states are maximum 32 bit unsigned integers\r\n    // BitLocation 0 refers to the least significant bit of a byte in the packet\r\n    // ByteLocation 0 refers to the first byte in the sequence.\r\n    // Bits must be populated in increasing significance\r\n\r\n    let stateVectorLength = parseInt(getNullTermString(dv));\r\n    let numVectors = parseInt(getNullTermString(dv));\r\n\r\n    // var vecOff = dv.tell();\r\n\r\n    let states = {};\r\n    for (let state in this.stateFormat)\r\n      states[state] = Array(numVectors).fill(\r\n        this.stateFormat[state].defaultValue\r\n      );\r\n\r\n    for (let vecIdx = 0; vecIdx < numVectors; vecIdx++) {\r\n      let vec = dv.getBytes(stateVectorLength, dv.tell(), true, false);\r\n      let bits = [];\r\n      for (let byteIdx = 0; byteIdx < vec.length; byteIdx++) {\r\n        bits.push((vec[byteIdx] & 0x01) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x02) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x04) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x08) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x10) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x20) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x40) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x80) !== 0 ? 1 : 0);\r\n      }\r\n\r\n      for (let stateIdx = 0; stateIdx < this.stateVecOrder.length; stateIdx++) {\r\n        let fmt = this.stateFormat[this.stateVecOrder[stateIdx][0]];\r\n        let offset = fmt.byteLocation * 8 + fmt.bitLocation;\r\n        let val = 0;\r\n        let mask = 0x01;\r\n        for (let bIdx = 0; bIdx < fmt.bitWidth; bIdx++) {\r\n          if (bits[offset + bIdx]) val = (val | mask) >>> 0;\r\n          mask = (mask << 1) >>> 0;\r\n        }\r\n        states[this.stateVecOrder[stateIdx][0]][vecIdx] = val;\r\n      }\r\n    }\r\n    this.onStateVector(states);\r\n  }\r\n}\r\n\r\nmodule.exports = BCI2K_OperatorConnection;\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_websocket__;"],"sourceRoot":""}