{"version":3,"sources":["webpack://BCI2K/webpack/universalModuleDefinition","webpack://BCI2K/webpack/bootstrap","webpack://BCI2K/./bci2k.ts","webpack://BCI2K/external \"websocket\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","websocket","w3cwebsocket","BCI2K_DataConnection","address","_socket","onconnect","onGenericSignal","data","onStateVector","onSignalProperties","onStateFormat","ondisconnect","onReceiveBlock","callingFrom","states","signal","signalProperties","stateFormat","stateVecOrder","SignalType","INT16","FLOAT24","FLOAT32","INT32","dv","val","count","byteLength","v","getUint8","String","fromCharCode","connection","undefined","Promise","resolve","reject","binaryType","onerror","onopen","onclose","e","setTimeout","console","log","connect","onmessage","event","_decodeMessage","readyState","OPEN","descriptor","DataView","stateFormatView","_decodeStateFormat","supplement","genericSignalView","_decodeGenericSignal","signalPropertyView","_decodeSignalProperties","error","toString","stateVectorView","_decodeStateVector","unitstr","units","unit","split","idx","offset","Number","gain","symbol","vmin","vmax","propstr","getNullTermString","replace","prop_tokens","props","length","trim","push","pidx","channels","numChannels","parseInt","elements","numElements","numelements","signaltype","channelunit","_decodePhysicalUnits","slice","join","elementunit","valueunits","lines","lineIdx","stateline","bitWidth","defaultValue","byteLocation","bitLocation","vecOrder","state","loc","sort","a","b","index","signalType","nChannels","getUint16","nElements","byteOffset","signalData","buffer","ch","el","getInt16","getFloat32","getInt32","_stateVectorLength","stateVectorLength","_numVectors","numVectors","Array","fill","vecIdx","vec","Uint8Array","bits","byteIdx","stateIdx","fmt","mask","bIdx","bciOperator","onStateChange","_execid","_exec","opcode","id","contents","JSON","parse","location","locationParameter","execute","then","indexOf","dataConnection","instruction","connected","exec","send","stringify","x","ip","port","setInterval","bciData"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"websocket\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"websocket\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BCI2K\"] = factory(require(\"websocket\"));\n\telse\n\t\troot[\"BCI2K\"] = factory(root[\"websocket\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"D:\\\\BCI2000\\\\BCI2K\\\\bci2k.js_ws\\\\dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// ======================================================================== //\r\n//\r\n// bci2k.js\r\n// A javascript connector for BCI2000\r\n//\r\n// ======================================================================== //\r\n\r\n//To see how the BCI2000 messages are implemented in BCI2000 see here:\r\n// https://www.bci2000.org/mediawiki/index.php/Technical_Reference:BCI2000_Messages\r\n\r\n\r\nconst websocket = require(\"websocket\").w3cwebsocket;\r\n\r\nclass BCI2K_OperatorConnection {\r\n  websocket: WebSocket;\r\n  _execid: any;\r\n  _exec: any;\r\n  state: any;\r\n  ondisconnect: any;\r\n  onStateChange: any;\r\n  address: string;\r\n\r\n\r\n  constructor(address?: string) {\r\n    this.ondisconnect = () => { };\r\n    this.onStateChange = (event: string) => { };\r\n\r\n    // this.websocket = null;\r\n    this._execid = 0;\r\n    this._exec = {};\r\n    this.state = '';\r\n    this.address = address;\r\n  }\r\n\r\n  public connect(address?: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.address === undefined) {\r\n        this.address = address || \"ws://127.0.0.1:80\" || `ws://{window.location.host}`;\r\n      };\r\n\r\n\r\n      this.websocket = new websocket(this.address);\r\n\r\n      this.websocket.onerror = error => {\r\n        // This will only execute if we err before connecting, since\r\n        // Promises can only get triggered once\r\n        reject(\"Error connecting to BCI2000 at \" + this.address);\r\n      };\r\n\r\n      this.websocket.onopen = () => {\r\n        resolve();\r\n      };\r\n\r\n      this.websocket.onclose = () => {\r\n        this.ondisconnect();\r\n      };\r\n\r\n      this.websocket.onmessage = event => {\r\n        let { opcode, id, contents } = JSON.parse(event.data)\r\n        switch (opcode) {\r\n          case \"O\": // OUTPUT: Received output from command\r\n            this._exec[id](contents)\r\n            delete this._exec[id];\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  public tap(location: string) {\r\n    let connection = this;\r\n\r\n    let locationParameter = \"WS\" + location + \"Server\";\r\n\r\n    return this.execute(\"Get Parameter \" + locationParameter).then((location: string) => {\r\n      if (location.indexOf(\"does not exist\") >= 0) {\r\n        return Promise.reject(\"Location parameter does not exist\");\r\n      }\r\n      if (location === \"\") {\r\n        return Promise.reject(\"Location parameter not set\");\r\n      }\r\n\r\n      let dataConnection = new BCI2K_DataConnection();\r\n\r\n      // Use our address plus the port from the result\r\n      return dataConnection\r\n        .connect(connection.address + \":\" + location.split(\":\")[1], '')\r\n        .then(event => {\r\n          // To keep with our old API, we actually want to wrap the\r\n          // dataConnection, and not the connection event\r\n          // TODO This means we can't get the connection event!\r\n          return dataConnection;\r\n        });\r\n    });\r\n  }\r\n\r\n  public connected() {\r\n    return this.websocket !== null && this.websocket.readyState === websocket.OPEN;\r\n  }\r\n\r\n  public execute(instruction: string) {\r\n    let connection = this;\r\n    if (this.connected()) {\r\n      return new Promise((resolve, reject) => {\r\n        let id = (++connection._execid).toString();\r\n        // TODO Properly handle errors from BCI2000\r\n        connection._exec[id] = exec => resolve(exec);\r\n        connection.websocket.send(JSON.stringify({\r\n          opcode: \"E\",\r\n          id: id,\r\n          contents: instruction\r\n        }));\r\n      });\r\n    }\r\n    // Cannot execute if not connected\r\n    return Promise.reject(\r\n      \"Cannot execute instruction: not connected to BCI2000\"\r\n    );\r\n  }\r\n\r\n  getVersion() {\r\n    this.execute(\"Version\").then((x: string) => console.log(x.split(\" \")[1]));\r\n  }\r\n\r\n  showWindow() {\r\n    return this.execute(\"Show Window\");\r\n  }\r\n\r\n  hideWindow() {\r\n    return this.execute(\"Hide Window\");\r\n  }\r\n\r\n  setWatch(state: string, ip: string, port: string) {\r\n    return this.execute(\"Add watch \" + state + \" at \" + ip + \":\" + port);\r\n  }\r\n\r\n  resetSystem() {\r\n    return this.execute(\"Reset System\");\r\n  }\r\n\r\n  setConfig() {\r\n    return this.execute(\"Set Config\");\r\n  }\r\n\r\n  start() {\r\n    return this.execute(\"Start\");\r\n  }\r\n\r\n  stop() {\r\n    return this.execute(\"Stop\");\r\n  }\r\n\r\n  kill() {\r\n    return this.execute(\"Exit\");\r\n  }\r\n\r\n  stateListen() {\r\n    setInterval(() => {\r\n      this.execute(\"GET SYSTEM STATE\")\r\n        .then((state: string) => {\r\n          if (state.trim() != this.state) {\r\n            this.onStateChange(state.trim());\r\n            this.state = state.trim();\r\n          }\r\n        });\r\n    }, 500)\r\n  }\r\n\r\n  async getSubjectName() {//Promise<string> {\r\n    return await this.execute('Get Parameter SubjectName');\r\n  };\r\n\r\n  async getTaskName() {\r\n    return await this.execute('Get Parameter DataFile');\r\n  };\r\n\r\n}\r\n\r\nclass BCI2K_DataConnection {\r\n  _socket: WebSocket;\r\n  states: any;\r\n  signal: any;\r\n  signalProperties: any;\r\n  stateFormat: any;\r\n  stateVecOrder: any;\r\n  SignalType: any;\r\n  callingFrom: any;\r\n  onconnect: any;\r\n  onGenericSignal: any;\r\n  onStateVector: any;\r\n  onSignalProperties: any;\r\n  onStateFormat: any;\r\n  ondisconnect: any;\r\n  onReceiveBlock: any;\r\n  address: string;\r\n  constructor(address?: string) {\r\n    this._socket = null;\r\n\r\n    this.onconnect = () => { };\r\n    this.onGenericSignal = (data: any) => { };\r\n    this.onStateVector = (data: any) => { };\r\n    this.onSignalProperties = (data: any) => { };\r\n    this.onStateFormat = (data: any) => { };\r\n    this.ondisconnect = () => { };\r\n    this.onReceiveBlock = () => { };\r\n\r\n    this.callingFrom = ''\r\n\r\n    this.states = {};\r\n    this.signal = null;\r\n    this.signalProperties = null;\r\n    this.stateFormat = null;\r\n    this.stateVecOrder = null;\r\n\r\n    this.SignalType = {\r\n      INT16: 0,\r\n      FLOAT24: 1,\r\n      FLOAT32: 2,\r\n      INT32: 3\r\n    };\r\n    this.address = address;\r\n  }\r\n\r\n  private getNullTermString(dv: DataView) {\r\n    var val = \"\";\r\n    let count = 0;\r\n    while (count < dv.byteLength) {\r\n      var v = dv.getUint8(count);\r\n      count++\r\n      if (v == 0) break;\r\n      val += String.fromCharCode(v);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  connect(address?: string, callingFrom?: string) {\r\n    let connection = this;\r\n    if (connection.address === undefined) connection.address = address;\r\n    this.callingFrom = callingFrom;\r\n    return new Promise<void>((resolve, reject) => {\r\n      connection._socket = new websocket(connection.address);\r\n      connection._socket.binaryType = 'arraybuffer';\r\n\r\n      connection._socket.onerror = () => {\r\n        // This will only execute if we err before connecting, since\r\n        // Promises can only get triggered once\r\n        reject(\"Error connecting to data source at \" + connection.address);\r\n      };\r\n\r\n      connection._socket.onopen = () => {\r\n        connection.onconnect();\r\n        resolve();\r\n      };\r\n\r\n      connection._socket.onclose = e => {\r\n        connection.ondisconnect();\r\n        setTimeout(() => {\r\n          console.log(\"Disconnected\")\r\n          this.connect('');\r\n\r\n        }, 1000)\r\n      };\r\n\r\n      connection._socket.onmessage = (event) => {\r\n        connection._decodeMessage(event.data);\r\n      };\r\n    });\r\n  }\r\n\r\n\r\n  connected(): boolean {\r\n    return this._socket != null && this._socket.readyState === websocket.OPEN;\r\n  }\r\n\r\n  private _decodeMessage(data: ArrayBuffer) {\r\n\tlet descriptor = new DataView(data, 0, 1).getUint8(0);\r\n    switch (descriptor) {\r\n      case 3:\r\n        let stateFormatView = new DataView(data, 1, data.byteLength - 1);\r\n        this._decodeStateFormat(stateFormatView);\r\n        break;\r\n\r\n      case 4:\r\n\t\tlet supplement = new DataView(data, 1, 2).getUint8(0);\r\n        switch (supplement) {\r\n          case 1:\r\n            let genericSignalView = new DataView(data, 2, data.byteLength - 2);\r\n            this._decodeGenericSignal(genericSignalView);\r\n            break;\r\n          case 3:\r\n            let signalPropertyView = new DataView(data, 2, data.byteLength - 2);\r\n            this._decodeSignalProperties(signalPropertyView);\r\n            break;\r\n          default:\r\n            console.error(\"Unsupported Supplement: \" + supplement.toString());\r\n            break;\r\n        }\r\n        this.onReceiveBlock();\r\n\r\n        break;\r\n\r\n      case 5:\r\n        let stateVectorView = new DataView(data, 1, data.byteLength - 1);\r\n        this._decodeStateVector(stateVectorView);\r\n        break;\r\n\r\n      default:\r\n        console.error(\"Unsupported Descriptor: \" + descriptor.toString());\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _decodePhysicalUnits(unitstr: string) {\r\n    let units: any;\r\n    units = {};\r\n    let unit = unitstr.split(\" \");\r\n    let idx = 0;\r\n    units.offset = Number(unit[idx++]);\r\n    units.gain = Number(unit[idx++]);\r\n    units.symbol = unit[idx++];\r\n    units.vmin = Number(unit[idx++]);\r\n    units.vmax = Number(unit[idx++]);\r\n    return units;\r\n  }\r\n\r\n  private _decodeSignalProperties(data: DataView) {\r\n    let propstr = this.getNullTermString(data);\r\n    // Bugfix: There seems to not always be spaces after '{' characters\r\n    propstr = propstr.replace(/{/g, \" { \");\r\n    propstr = propstr.replace(/}/g, \" } \");\r\n\r\n    this.signalProperties = {};\r\n    let prop_tokens = propstr.split(\" \");\r\n    let props = [];\r\n    for (let i = 0; i < prop_tokens.length; i++) {\r\n      if (prop_tokens[i].trim() === \"\") continue;\r\n      props.push(prop_tokens[i]);\r\n    }\r\n\r\n    let pidx = 0;\r\n    this.signalProperties.name = props[pidx++];\r\n\r\n    this.signalProperties.channels = [];\r\n    if (props[pidx] === \"{\") {\r\n      while (props[++pidx] !== \"}\")\r\n        this.signalProperties.channels.push(props[pidx]);\r\n      pidx++; // }\r\n    } else {\r\n      let numChannels = parseInt(props[pidx++]);\r\n      for (let i = 0; i < numChannels; i++)\r\n        this.signalProperties.channels.push((i + 1).toString());\r\n    }\r\n\r\n    this.signalProperties.elements = [];\r\n    if (props[pidx] === \"{\") {\r\n      while (props[++pidx] !== \"}\")\r\n        this.signalProperties.elements.push(props[pidx]);\r\n      pidx++; // }\r\n    } else {\r\n      let numElements = parseInt(props[pidx++]);\r\n      for (let i = 0; i < numElements; i++)\r\n        this.signalProperties.elements.push((i + 1).toString());\r\n    }\r\n\r\n    // Backward Compatibility\r\n    this.signalProperties.numelements = this.signalProperties.elements.length;\r\n    this.signalProperties.signaltype = props[pidx++];\r\n    this.signalProperties.channelunit = this._decodePhysicalUnits(\r\n      props.slice(pidx, (pidx += 5)).join(\" \")\r\n    );\r\n\r\n    this.signalProperties.elementunit = this._decodePhysicalUnits(\r\n      props.slice(pidx, (pidx += 5)).join(\" \")\r\n    );\r\n\r\n    pidx++; // '{'\r\n\r\n    this.signalProperties.valueunits = [];\r\n    for (let i = 0; i < this.signalProperties.channels.length; i++)\r\n      this.signalProperties.valueunits.push(\r\n        this._decodePhysicalUnits(props.slice(pidx, (pidx += 5)).join(\" \"))\r\n      );\r\n\r\n    pidx++; // '}'\r\n    this.onSignalProperties(this.signalProperties);\r\n  }\r\n\r\n  private _decodeStateFormat(data: DataView) {\r\n    this.stateFormat = {};\r\n    let formatStr = this.getNullTermString(data);\r\n\r\n    let lines = formatStr.split(\"\\n\");\r\n    for (let lineIdx = 0; lineIdx < lines.length; lineIdx++) {\r\n      if (lines[lineIdx].trim().length === 0) continue;\r\n      let stateline = lines[lineIdx].split(\" \");\r\n      let name = stateline[0];\r\n      this.stateFormat[name] = {};\r\n      this.stateFormat[name].bitWidth = parseInt(stateline[1]);\r\n      this.stateFormat[name].defaultValue = parseInt(stateline[2]);\r\n      this.stateFormat[name].byteLocation = parseInt(stateline[3]);\r\n      this.stateFormat[name].bitLocation = parseInt(stateline[4]);\r\n    }\r\n\r\n    let vecOrder = [];\r\n    for (let state in this.stateFormat) {\r\n      let loc = this.stateFormat[state].byteLocation * 8;\r\n      loc += this.stateFormat[state].bitLocation;\r\n      vecOrder.push([state, loc]);\r\n    }\r\n\r\n    // Sort by bit location\r\n    vecOrder.sort((a, b) => (a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0));\r\n\r\n    // Create a list of ( state, bitwidth ) for decoding state vectors\r\n    this.stateVecOrder = [];\r\n    for (let i = 0; i < vecOrder.length; i++) {\r\n      let state = vecOrder[i][0];\r\n      this.stateVecOrder.push([state, this.stateFormat[state].bitWidth]);\r\n    }\r\n\r\n    this.onStateFormat(this.stateFormat);\r\n  }\r\n\r\n  private _decodeGenericSignal(data: DataView) {\r\n    let index = 0;\r\n\tlet signalType = data.getUint8(index);\r\n    index = index + 1;\r\n\tlet nChannels = data.getUint16(index, true)\r\n\tindex = index + 2\r\n\tlet nElements = data.getUint16(index, true)\r\n\tindex = index + 2\r\n\tindex = index + data.byteOffset\r\n    let signalData = new DataView(data.buffer, index)\r\n    let signal = [];\r\n    for (let ch = 0; ch < nChannels; ++ch) {\r\n      signal.push([]);\r\n      for (let el = 0; el < nElements; ++el) {\r\n        switch (signalType) {\r\n          case this.SignalType.INT16:\r\n            signal[ch].push(signalData.getInt16((nElements * ch + el) * 2, true));\r\n            break;\r\n\r\n          case this.SignalType.FLOAT32:\r\n            signal[ch].push(signalData.getFloat32((nElements * ch + el) * 4, true));\r\n            break;\r\n\r\n          case this.SignalType.INT32:\r\n            signal[ch].push(signalData.getInt32((nElements * ch + el) * 4, true));\r\n            break;\r\n\r\n          case this.SignalType.FLOAT24:\r\n            // TODO: Currently Unsupported\r\n            signal[ch].push(0.0);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    this.signal = signal;\r\n    this.onGenericSignal(signal);\r\n  }\r\n\r\n\r\n  private _decodeStateVector(dv: DataView) {\r\n    if (this.stateVecOrder == null) return;\r\n    // Currently, states are maximum 32 bit unsigned integers\r\n    // BitLocation 0 refers to the least significant bit of a byte in the packet\r\n    // ByteLocation 0 refers to the first byte in the sequence.\r\n    // Bits must be populated in increasing significance\r\n    let index = 1;\r\n    let _stateVectorLength = new DataView(dv.buffer, index, 2)\r\n    index = index + 2;\r\n    let stateVectorLength = parseInt(this.getNullTermString(_stateVectorLength));\r\n    let _numVectors = new DataView(dv.buffer, index, 2)\r\n    index = index + 3;\r\n    let numVectors = parseInt(this.getNullTermString(_numVectors));\r\n    let data = new DataView(dv.buffer, index);\r\n    let states = {};\r\n    for (let state in this.stateFormat)\r\n      states[state] = Array(numVectors).fill(\r\n        this.stateFormat[state].defaultValue\r\n      );\r\n\r\n    for (let vecIdx = 0; vecIdx < numVectors; vecIdx++) {\r\n      let vec = new Uint8Array(data.buffer, data.byteOffset + (vecIdx * stateVectorLength), stateVectorLength);\r\n      let bits = [];\r\n      for (let byteIdx = 0; byteIdx < vec.length; byteIdx++) {\r\n        bits.push((vec[byteIdx] & 0x01) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x02) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x04) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x08) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x10) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x20) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x40) !== 0 ? 1 : 0);\r\n        bits.push((vec[byteIdx] & 0x80) !== 0 ? 1 : 0);\r\n      }\r\n\r\n      for (let stateIdx = 0; stateIdx < this.stateVecOrder.length; stateIdx++) {\r\n        let fmt = this.stateFormat[this.stateVecOrder[stateIdx][0]];\r\n        let offset = fmt.byteLocation * 8 + fmt.bitLocation;\r\n        let val = 0;\r\n        let mask = 0x01;\r\n        for (let bIdx = 0; bIdx < fmt.bitWidth; bIdx++) {\r\n          if (bits[offset + bIdx]) val = (val | mask) >>> 0;\r\n          mask = (mask << 1) >>> 0;\r\n        }\r\n        states[this.stateVecOrder[stateIdx][0]][vecIdx] = val;\r\n      }\r\n    }\r\n    this.onStateVector(states);\r\n    this.states = states;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  bciOperator: BCI2K_OperatorConnection,\r\n  bciData: BCI2K_DataConnection\r\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;"],"sourceRoot":""}